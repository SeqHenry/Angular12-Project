{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n  TemplateRef,\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding, CdkTreeNode, CdkTree} from '@angular/cdk/tree';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Directive, Input, Optional, Renderer2, ElementRef} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(_treeNode: CdkTreeNode<T>,\n              _tree: CdkTree<T>,\n              _renderer: Renderer2,\n              _element: ElementRef,\n              @Optional() _dir: Directionality) {\n      super(_treeNode, _tree, _renderer, _element, _dir);\n    }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ViewChild,\n  ViewEncapsulation,\n  IterableDiffers,\n} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(_differs: IterableDiffers, _changeDetectorRef: ChangeDetectorRef) {\n    super(_differs, _changeDetectorRef);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle, CdkTree, CdkTreeNode} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(_tree: CdkTree<T>, _treeNode: CdkTreeNode<T>) {\n    super(_tree, _treeNode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.4.5');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(option => !option.selected);\n      this.options.forEach(option => hasDeselectedOptions ? option.select() : option.deselect());\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef.nativeElement);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this.onTouched());\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() location?: Location) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n    // because named route URLs can contain parentheses (see #12338).\n    this._rectangleFillValue = `url('${location ? location.path() : ''}#${this.progressbarId}')`;\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this._datepicker && event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    const chipsArray = this.chips.toArray();\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && (this.focused ||\n      (this._keyManager.activeItem && chipsArray.indexOf(this._keyManager.activeItem) === -1))) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      const focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this._onTouched());\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    // If we're switching to `outline` from another appearance, we have to recalculate the gap.\n    if (value !== this._appearance && value === 'outline') {\n      this._initialGapCalculated = false;\n    }\n\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  _outlineGapWidth = 0;\n  _outlineGapStart = 0;\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n\n    if (!this._initialGapCalculated) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        // It's important that we run this outside the `_ngZone`, because the `Promise.resolve`\n        // can kick us into an infinite change detection loop, if the `_initialGapCalculated`\n        // wasn't flipped on for some reason.\n        this._ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["inputs","host","class","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","type","undefined","decorators","Inject","args","DOCUMENT","MatToolbar","propDecorators","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatToolbarModule","MatTreeNodeOutlet","viewContainer","this","Directive","selector","ViewContainerRef","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","role","Number","tslib_1.__extends","exportAs","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","Attribute","Input","MatTreeNodeDef","template","CdkTreeNodeDef","TemplateRef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","MatTreeNodePadding","_treeNode","_renderer","_element","_dir","CdkTreeNodePadding","Renderer2","Directionality","Optional","level","indent","MatTree","_changeDetectorRef","Component","styles","MatTreeNodeToggle","recursive","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","CommonModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatInkBar","hide","nativeElement","style","visibility","_setStyles","element","positions","_inkBarPositioner","inkBar","left","width","NgZone","_MAT_INK_BAR_POSITIONER","MatTabLabel","templateRef","viewContainerRef","CdkPortal","MatTabContent","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_labelChange","Subject","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","tabChangeEvent","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","updateActiveLink","_activeLinkChanged","runOutsideAngular","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","providedIn","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_stateChanges","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","CdkColumnDef","disableClear","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","MatSlider","_vertical","displayWith","_roundToDecimal","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","_percent","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_invertMouseCoords","_thumbGap","_direction","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","keyframes","MatDrawerContent","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","_onInputClick","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatRipple","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","toString","split","pop","parseFloat","Location","MatProgressBar","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_checkOverlayWithinViewport","maxScroll","MatSelect","_calculateOverlayScroll","scrollBuffer","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","_calculateOverlayOffsetY","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","_scrollTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","_offsetY","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","location","_bufferValue","_rectangleFillValue","path","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","_template","insertBefore","outletElement","context","_attached","MatMenuContent","isAttached","ApplicationRef","matMenuAnimations","transformMenu","sequence","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","panelHeight","scrollContainerHeight","selectedOptionOffset","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToNumber","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","_dateAdapter","createMissingDateImplError","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","date","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","_colspan","property","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","firstChange","view","_getCurrentViewComponent","headerComponent","monthView","yearView","multiYearView","chips","chip","MatChipList","MatChipListChange","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","_updateKeyManager","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_result","dialogResult","detachBackdrop","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_changeSubscription","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","chipsArray","focusChip","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","defaultTabIndex","_isSingleSelector","parsedTabIndex","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MatAutocomplete","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","optionSelected","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_animationsEnabled","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}